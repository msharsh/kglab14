using kgLab.Properties;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace kgLab
{
    public partial class InfoForm : Form
    {
        InfoType infoType;
        public InfoForm(InfoType infoType)
        {
            InitializeComponent();
            this.infoType = infoType;
            switch(infoType)
            {
                case InfoType.Fractal:
                    InfoOnFractals();
                    label1.Text = "INFO ON FRACTALS";

                    button2.Text = "Info On Color Schemes >";
                    pictureBox1.Image = Resources.mandelbrot_set;
                    pictureBox2.Image = Resources.Koch_snowflake;
                    pictureBox3.Image = Resources.sierpinski;
                    break;
                case InfoType.Color_Schemes:
                    InfoOnColorSchemes();
                    label1.Text = "INFO ON COLOR SCHEMES";

                    button2.Text = "Info On Moving Images >";
                    pictureBox1.Image = Resources.rgb;
                    pictureBox2.Image = Resources.hsl;
                    pictureBox3.Image = Resources.lab;
                    break;
                case InfoType.Moving_Images:
                    InfoOnMovingImages();
                    label1.Text = "INFO ON MOVING IMAGES";

                    button2.Text = "Info On Fractals >";
                    pictureBox1.Image = Resources.affine_transformation_17830cbb6_d008_4960_b65b_9b157dd63553;
                    pictureBox2.Image = Resources.affine_transformation_all;
                    pictureBox3.Image = Resources.affine_fractal;
                    break;


            }
            richTextBox2.Font = new Font("Comic Sans MS", richTextBox2.Font.Size);

            StaticMethods.RoundButton(button1);
            StaticMethods.RoundButton(button2);
            StaticMethods.RoundButton(button3);
        }
        private void InfoOnFractals()
        {
            string fractalInfo = @"{\rtf
{\b Fractals: A Fascinating Exploration\par}

In the intricate tapestry of mathematical beauty lies a captivating concept known as fractals. These self-replicating geometric patterns, often associated with chaos theory, offer a glimpse into the mesmerizing complexity of nature. The word 'fractal' itself is derived from the Latin word 'fractus,' meaning 'broken' or 'fragmented,' reflecting the fragmented and self-replicating nature of these intriguing mathematical constructs.\par\par

{\b Types of Fractals:}\par\par

1. {\b Mandelbrot Set:}
   - Perhaps the most famous, the Mandelbrot Set, discovered by mathematician Benoît B. Mandelbrot, exhibits self-similarity at varying scales. Its infinite complexity arises from simple iterative processes.\par\par

2. {\b Julia Set:}
   - A close relative of the Mandelbrot Set, the Julia Set also displays self-replicating patterns but with different parameters, leading to an astounding variety of intricate shapes.\par\par

3. {\b Koch Snowflake:}
   - A classic example of a fractal curve, the Koch Snowflake is constructed by iteratively adding triangles to the edges of a triangle, creating an infinitely complex, self-repeating pattern.\par\par

4. {\b Sierpinski Triangle:}
   - Named after Polish mathematician Wacław Sierpiński, this fractal is generated by removing triangles from a larger triangle in a recursive manner, forming a visually stunning triangular pattern.\par\par\par

{\b Methods of Creating Fractals:}\par\par

1. {\b Iterative Processes:}
   - Fractals often emerge from simple iterative processes, where a mathematical operation is applied repeatedly to generate complex patterns.\par\par

2. {\b Recursion:}
   - Recursion plays a key role in fractal generation. Fractals are defined in terms of themselves, with each part resembling the whole, creating a recursive, self-replicating structure.\par\par

3. {\b Complex Number Systems:}
   - The use of complex numbers, particularly in the context of the Mandelbrot and Julia sets, is fundamental to the creation of fractals. The intricate patterns arise from the behavior of complex values during iterative calculations.\par\par\par

}";

            richTextBox2.Rtf = fractalInfo;
        }
        private void InfoOnColorSchemes()
        {
            string colorSchemesInfo = @"{\rtf
{\b Color Schemes in Computer Graphics: A Palette of Possibilities\par}

In the vibrant realm of computer graphics, the portrayal of color is a nuanced and captivating art. Various color schemes serve as the foundation for rendering the rich and diverse hues we witness on digital screens. These schemes, rooted in mathematical models, offer unique ways to represent and manipulate colors, allowing for stunning visual experiences.\par\par

{\b 1. RGB (Red, Green, Blue):\par\par}
   - RGB is a widely used additive color model. Each color is represented by combining varying intensities of red, green, and blue light. The blending of these primary colors in different proportions yields an extensive spectrum of shades.\par\par\par

{\b 2. HSL (Hue, Saturation, Lightness):\par\par}
   - HSL provides a human-centric approach to color representation. Hue determines the type of color, saturation controls its vividness, and lightness influences its brightness. This model aligns closely with how humans perceive and describe colors.\par\par\par

{\b 3. HSV (Hue, Saturation, Value):\par\par}
   - Similar to HSL, HSV is another representation that separates color into three components. Hue signifies the type of color, saturation controls intensity, and value influences brightness. HSV, however, operates in a cylindrical color space, offering a different perspective.\par\par\par

{\b 4. CMYK (Cyan, Magenta, Yellow, Key/Black):\par\par}
   - CMYK is a subtractive color model primarily used in printing. Colors are created by subtracting varying amounts of cyan, magenta, yellow, and black. This model is crucial for producing accurate and consistent colors in the realm of print media.\par\par\par

{\b 5. Lab (CIELAB):\par\par}
   - Lab is a perceptually uniform color space, designed to be more consistent with human vision. It separates color into three components: L* for lightness, a* for green to red, and b* for blue to yellow. Lab is often used for color correction and analysis.\par\par\par
}";

            richTextBox2.Rtf = colorSchemesInfo;
        }
        private void InfoOnMovingImages()
        {
            string affineTransformationsInfo = @"{\rtf
{\b Affine Transformations in 2D Space: Unveiling the Canvas of Possibilities\par\par}

In the enchanting realm of computer graphics, the orchestration of visual elements often involves the delicate art of affine transformations in 2D space. These transformations, rooted in linear algebra, empower designers and developers to manipulate shapes, patterns, and images with mathematical precision, bringing creativity to life on the digital canvas.\par\par

{\b 1. Translation:\par\par}
   - At its core, translations the movement of objects from one position to another. A translation vector [x, y] is added to the coordinates of each point:\par
   [1 0 \(x\)]\par
   [0 1 \(y\)]\par
   [0 0 1]\par\par

{\b 2. Rotation:\par\par}
   - Rotation breathes life into static elements. For an angle \(theta\), the rotation matrix is defined as:\par
   [\(cos(theta)\) -\(sin(theta)\) 0]\par
   [\(sin(theta)\) \(cos(theta)\) 0]\par
   [0 0 1]\par\par

{\b 3. Scaling:\par\par}
   - Amplifying or diminishing the size of objects is achieved through scaling. With scaling factors (sx, sy), the scaling matrix is given by:\par
   [sx 0 0]\par
   [0 sy 0]\par
   [0 0 1]\par\par

{\b 4. Shearing:\par\par}
   - Shearing introduces a slant or skew to elements. Shearing factors (shx, shy) result in the shearing matrix:\par
   [1 shx 0]\par
   [shy 1 0]\par
   [0 0 1]\par\par

These transformations, when combined or applied sequentially, unlock a myriad of possibilities. The composite transformation matrix \( M \) is the product of individual transformations:\par
\[ M = T * R * S * SH \]
}";

            // Set the formatted text to the RichTextBox
            richTextBox2.Rtf = affineTransformationsInfo;
        }
        private void button1_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            QuizForm QuizForm = new QuizForm(infoType);
            QuizForm.Show();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            switch (infoType)
            {
                case InfoType.Fractal:
                    infoType = InfoType.Color_Schemes;
                    label1.Text = "INFO ON COLOR SCHEMES";
                    button2.Text = "Info On Moving Images >";
                    pictureBox1.Image = Resources.rgb;
                    pictureBox2.Image = Resources.hsl;
                    pictureBox3.Image = Resources.lab;
                    InfoOnColorSchemes();
                    break;
                case InfoType.Color_Schemes:
                    infoType = InfoType.Moving_Images;
                    label1.Text = "INFO ON MOVING IMAGES";
                    button2.Text = "Info On Fractals >";
                    pictureBox1.Image = Resources.affine_transformation_17830cbb6_d008_4960_b65b_9b157dd63553;
                    pictureBox2.Image = Resources.affine_transformation_all;
                    pictureBox3.Image = Resources.affine_fractal;
                    InfoOnMovingImages();
                    break;
                case InfoType.Moving_Images:
                    infoType = InfoType.Fractal;
                    label1.Text = "INFO ON FRACTALS";
                    button2.Text = "Info On Color Schemes >";
                    pictureBox1.Image = Resources.mandelbrot_set;
                    pictureBox2.Image = Resources.Koch_snowflake;
                    pictureBox3.Image = Resources.sierpinski;
                    InfoOnFractals();
                    break;
            }
        }
    }
    public enum InfoType
        {
            Fractal,
            Color_Schemes,
            Moving_Images
        }
}
